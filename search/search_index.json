{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome! \u00b6 Welcome to More Data Structures! Here you'll be able to reinforce the material you'll be learning in your Data Structures course. Please refer to the navigation buttons above to select a topic and view material their corresponding material. Here is what you can expect More Data Structures to provide: A set of problems for each topic Coding exercises that are integrated with Git and GitHub Useful links and resources CSUF Supplemental Instruction \u00b6 This website is intended to be a supplement to Oscar's assigned CPSC 131 Data Structures Supplemental Instruction session. As a result, the content on this website will be completely wiped and re-developed at the beginning of every California State University, Fullerton (CSUF) semester. Topics are released on a rolling basis. Release dates are based off what the 131 professors have covered so far. Additionally, this means that some of the content on here may be difficult to understand if you do not attend the SI sessions. Please utilize the comment sections if you are having trouble and are unable to make the SI sessions.","title":"Home"},{"location":"#welcome","text":"Welcome to More Data Structures! Here you'll be able to reinforce the material you'll be learning in your Data Structures course. Please refer to the navigation buttons above to select a topic and view material their corresponding material. Here is what you can expect More Data Structures to provide: A set of problems for each topic Coding exercises that are integrated with Git and GitHub Useful links and resources","title":"Welcome!"},{"location":"#csuf-supplemental-instruction","text":"This website is intended to be a supplement to Oscar's assigned CPSC 131 Data Structures Supplemental Instruction session. As a result, the content on this website will be completely wiped and re-developed at the beginning of every California State University, Fullerton (CSUF) semester. Topics are released on a rolling basis. Release dates are based off what the 131 professors have covered so far. Additionally, this means that some of the content on here may be difficult to understand if you do not attend the SI sessions. Please utilize the comment sections if you are having trouble and are unable to make the SI sessions.","title":"CSUF Supplemental Instruction"},{"location":"set-up/","text":"Overview \u00b6 Every week, a new set of programming exercises will be introduced via GitHub. You can find the exercises at the repository https://github.com/omolazabal/si-fall-2019 . Continue reading to learn how to use the repository. The structures of the repository is as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 . \u251c\u2500 1-dynamic-memory/ # Dynamic memory topic \u2502 \u251c\u2500 codebase \u2502 \u2514\u2500 ... \u2502 \u251c\u2500 2-fixed-vector/ # Vectors topic \u2502 \u251c\u2500 codebase \u2502 \u2514\u2500 ... \u2502 \u251c\u2500 ... # Other topics \u2502 \u2514\u2500 ... \u2502 \u251c\u2500 7-recursion/a # Recursion topics \u2502 \u251c\u2500 codebase \u2502 \u2514\u2500 ... Where each directory labeled with a number represents a topic and their sub-directories represents their codebase. Note Topics will be added as the semester progresses as described on the homepage . Each topic's codebase contains functions with missing code segments. Participants will be tasked with filling in the missing information. Details on the missing information can be found under the topic's respective tab on this website. At the end of the week, the topic's respective codebase will be upadated with solutions, in case participants were unable to finish during the SI session. Getting started \u00b6 Download and set up Tuffix . Create a GitHub account Fork the SI GitHub repository . You can accomplish this by clicking the Fork button on the top right corner of the repository's page. Navigating to your preferred workspace in your terminal to work on the repository locally. Use this guide if necessary. Clone your forked repository by running the following command. Replace with your GitHub username. 1 git clone https://github.com/<YOUR_GITHUB_USERNAME>/si-fall-2019.git Workflow \u00b6 Initial Set Up \u00b6 Before you begin working on programming exercises, you'll have to configure your repository so that you can update it with new problems. This can be done by running the following command in your terminal while in your repository: 1 python3 run.py --config Warning This only has to be done once. If you were to run this command again, all of your progress from all topics will be erased Updating Your Set of Exercises \u00b6 Every week of the semester this repository will be updated with new exercises. The files of each exercise will available in their respective folder. The task is to fill out the empty functions. To update your repository with the latest problems, run the command: 1 python3 run.py --update Editing Code Segments \u00b6 Code segments you are intended to modify are labeled via comments: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include \"course.h\" #include \"student.h\" #include <stdexcept> using namespace std ; Course :: Course () { // Initialize member variables. // By default, course will hold a max of 25 students. // ========= ONLY MODIFY BETWEEN THE LINES =========== // ==================================================== } Please only modify the code between the lines. If changes are made elsewhere, there will be issues when attempting to update your repository with new problems. Testing Your Changes \u00b6 To execute your programs, run the following command at the root of your repository: 1 python3 run.py --test <folder_name> Where the --test flag signifies you want to test the corresponding code in the folder named . Please replace with the name of whichever folder you would like to test. For example, the following command will un the unit tests associated with the 1-dynamic-memory problem set: 1 python3 run.py --test 1-dynamic-memory If you wish to run all tests, use the command: 1 python3 run.py --test all Summary of commands \u00b6 Command Action python3 run.py --config Initial git configuration python3 run.py --update Update workspace with newly available problems python3 run.py --test [folder name] Run unit tests to see how your programs perform","title":"Coding Exercises"},{"location":"set-up/#overview","text":"Every week, a new set of programming exercises will be introduced via GitHub. You can find the exercises at the repository https://github.com/omolazabal/si-fall-2019 . Continue reading to learn how to use the repository. The structures of the repository is as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 . \u251c\u2500 1-dynamic-memory/ # Dynamic memory topic \u2502 \u251c\u2500 codebase \u2502 \u2514\u2500 ... \u2502 \u251c\u2500 2-fixed-vector/ # Vectors topic \u2502 \u251c\u2500 codebase \u2502 \u2514\u2500 ... \u2502 \u251c\u2500 ... # Other topics \u2502 \u2514\u2500 ... \u2502 \u251c\u2500 7-recursion/a # Recursion topics \u2502 \u251c\u2500 codebase \u2502 \u2514\u2500 ... Where each directory labeled with a number represents a topic and their sub-directories represents their codebase. Note Topics will be added as the semester progresses as described on the homepage . Each topic's codebase contains functions with missing code segments. Participants will be tasked with filling in the missing information. Details on the missing information can be found under the topic's respective tab on this website. At the end of the week, the topic's respective codebase will be upadated with solutions, in case participants were unable to finish during the SI session.","title":"Overview"},{"location":"set-up/#getting-started","text":"Download and set up Tuffix . Create a GitHub account Fork the SI GitHub repository . You can accomplish this by clicking the Fork button on the top right corner of the repository's page. Navigating to your preferred workspace in your terminal to work on the repository locally. Use this guide if necessary. Clone your forked repository by running the following command. Replace with your GitHub username. 1 git clone https://github.com/<YOUR_GITHUB_USERNAME>/si-fall-2019.git","title":"Getting started"},{"location":"set-up/#workflow","text":"","title":"Workflow"},{"location":"set-up/#initial-set-up","text":"Before you begin working on programming exercises, you'll have to configure your repository so that you can update it with new problems. This can be done by running the following command in your terminal while in your repository: 1 python3 run.py --config Warning This only has to be done once. If you were to run this command again, all of your progress from all topics will be erased","title":"Initial Set Up"},{"location":"set-up/#updating-your-set-of-exercises","text":"Every week of the semester this repository will be updated with new exercises. The files of each exercise will available in their respective folder. The task is to fill out the empty functions. To update your repository with the latest problems, run the command: 1 python3 run.py --update","title":"Updating Your Set of Exercises"},{"location":"set-up/#editing-code-segments","text":"Code segments you are intended to modify are labeled via comments: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include \"course.h\" #include \"student.h\" #include <stdexcept> using namespace std ; Course :: Course () { // Initialize member variables. // By default, course will hold a max of 25 students. // ========= ONLY MODIFY BETWEEN THE LINES =========== // ==================================================== } Please only modify the code between the lines. If changes are made elsewhere, there will be issues when attempting to update your repository with new problems.","title":"Editing Code Segments"},{"location":"set-up/#testing-your-changes","text":"To execute your programs, run the following command at the root of your repository: 1 python3 run.py --test <folder_name> Where the --test flag signifies you want to test the corresponding code in the folder named . Please replace with the name of whichever folder you would like to test. For example, the following command will un the unit tests associated with the 1-dynamic-memory problem set: 1 python3 run.py --test 1-dynamic-memory If you wish to run all tests, use the command: 1 python3 run.py --test all","title":"Testing Your Changes"},{"location":"set-up/#summary-of-commands","text":"Command Action python3 run.py --config Initial git configuration python3 run.py --update Update workspace with newly available problems python3 run.py --test [folder name] Run unit tests to see how your programs perform","title":"Summary of commands"},{"location":"si-sessions/","text":"There are plenty of CPSC 131 Supplemental Instruction sections available. Below is the schedule. Date Time Room Leader Professor TuTh 2:30pm - 3:45pm CS 209 Daniel Walsh Anand Panangadan MoWe 10:00am - 11:15am CS 209 Gregory Vasquez Doina Bein MoWe 4:00pm - 5:15pm CS 209 Janeen Yamak Lakhanpal MoWe 5:30pm - 6:45pm CS 209 Oscar Olazabal Lakhanpal Note SI sessions may slightly vary in terms of content and presentation, as SI leaders are required to create an ajenda for their particular professor.","title":"SI Sessions"},{"location":"essentials/coding-exercise/","text":"Note If you have not configured you repository yet, please refer to this guide . You have to set it up in order to test your solutions. Retrieving The New Problem Set \u00b6 Please run 1 python3 run.py --update To ensure you have the latest problem set. You should be able to see 1-dynamic-memory in your repository. The Code \u00b6 This week's exercise will focus on dynamic memory, as it is a fundametal aspect of data structures in C++. Specifically, you will be allocating, handling, and freeing memory in C++. This pattern of allocating, handling, and freeing memory is essential when creating data structures (as you will see later in the course). The 1-dynamic-memory codebase consists of a program that allows one to enroll students into a course. You will be filling in the empty functions in src/course.cpp in order complete this exercise. Warning In your repository, please only modify the highlighted regions in src/course.cpp indicated below include/course.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 #ifndef COURSE_H #define COURSE_H #include \"student.h\" using namespace std ; class Course { private : size_t num_students , max_students ; int professor_cwid , class_num ; Student * students ; public : Course (); Course ( size_t max ); ~ Course (); Student get_student ( size_t index ) const ; void enroll_student ( const Student & student ); // Mutators void set_class_number ( int num ); void set_professor_cwid ( int id ); // Accessors int get_class_number () const ; size_t get_max_students () const ; size_t get_num_students () const ; int get_professor_cwid () const ; }; #endif include/student.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #ifndef STUDENT_H #define STUDENT_H #include \"string\" using namespace std ; class Student { private : int cwid ; string student_fname , student_lname ; public : // Contructors Student (); Student ( string fname , string lname , int id ); // Mutators void set_cwid ( int id ); void set_fname ( string fname ); void set_lname ( string lname ); // Accessors int get_cwid () const ; string get_fname () const ; string get_lname () const ; friend bool operator == ( const Student & lhs , const Student & rhs ); }; #endif src/course.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 #include \"course.h\" #include \"student.h\" #include <stdexcept> using namespace std ; Course :: Course () { // Initialize member variables. // By default, course will hold a max of 25 students. // ========= ONLY MODIFY BETWEEN THE LINES =========== // ==================================================== } Course :: Course ( size_t max ) { // Very similar to default constructor, but parameter specifies max // number of students. // ========= ONLY MODIFY BETWEEN THE LINES =========== // ==================================================== } Course ::~ Course () { // Utilized to free allocated memory. // ========= ONLY MODIFY BETWEEN THE LINES =========== // ==================================================== } Student Course :: get_student ( size_t index ) const { // Fetch student at specified index. // Utilize stdexcept to handle edge cases. // ========= ONLY MODIFY BETWEEN THE LINES =========== return Student (); // ==================================================== } void Course :: enroll_student ( const Student & student ) { // Insert a new student // Utilize stdexcept to handle endge cases. // ========= ONLY MODIFY BETWEEN THE LINES =========== // ==================================================== } void Course :: set_class_number ( int num ) { class_num = num ; } void Course :: set_professor_cwid ( int id ) { professor_cwid = id ; } int Course :: get_class_number () const { return class_num ; } size_t Course :: get_max_students () const { return max_students ; } size_t Course :: get_num_students () const { return num_students ; } int Course :: get_professor_cwid () const { return professor_cwid ; } src/student.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #include \"student.h\" Student :: Student () : cwid ( - 1 ) {} Student :: Student ( string fname , string lname , int id ) : cwid ( id ), student_fname ( fname ), student_lname ( lname ) {} void Student :: set_cwid ( int id ) { cwid = id ; } void Student :: set_fname ( string fname ) { student_fname = fname ; } void Student :: set_lname ( string lname ) { student_lname = lname ; } int Student :: get_cwid () const { return cwid ; } string Student :: get_fname () const { return student_fname ; } string Student :: get_lname () const { return student_lname ; } bool operator == ( const Student & lhs , const Student & rhs ) { return ( lhs . cwid == rhs . cwid && lhs . student_fname == rhs . student_fname && lhs . student_lname == rhs . student_lname ); } Testing \u00b6 After you have modified your code, test it! You can test it by running 1 python3 run.py --test 1-dynamic-memory At the root of your repository. If you've successfully implemented all of the functions, your output should look like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u276f python3 run.py --test 1-dynamic-memory a - gtest-all.o a - gtest-all.o a - gtest_main.o unit_test_1 Running main() from /Users/oscar/Documents/projects/si-spring-2019/googletest/src/gtest_main.cc [==========] Running 3 tests from 1 test case. [----------] Global test environment set-up. [----------] 3 tests from Dynamic_Memory [ RUN ] Dynamic_Memory.Constructor [ OK ] Dynamic_Memory.Constructor (0 ms) [ RUN ] Dynamic_Memory.Enroll_Student [ OK ] Dynamic_Memory.Enroll_Student (0 ms) [ RUN ] Dynamic_Memory.Get_Student [ OK ] Dynamic_Memory.Get_Student (0 ms) [----------] 3 tests from Dynamic_Memory (0 ms total) [----------] Global test environment tear-down [==========] 3 tests from 1 test case ran. (0 ms total) [ PASSED ] 3 tests.","title":"Coding Exercise"},{"location":"essentials/coding-exercise/#retrieving-the-new-problem-set","text":"Please run 1 python3 run.py --update To ensure you have the latest problem set. You should be able to see 1-dynamic-memory in your repository.","title":"Retrieving The New Problem Set"},{"location":"essentials/coding-exercise/#the-code","text":"This week's exercise will focus on dynamic memory, as it is a fundametal aspect of data structures in C++. Specifically, you will be allocating, handling, and freeing memory in C++. This pattern of allocating, handling, and freeing memory is essential when creating data structures (as you will see later in the course). The 1-dynamic-memory codebase consists of a program that allows one to enroll students into a course. You will be filling in the empty functions in src/course.cpp in order complete this exercise. Warning In your repository, please only modify the highlighted regions in src/course.cpp indicated below include/course.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 #ifndef COURSE_H #define COURSE_H #include \"student.h\" using namespace std ; class Course { private : size_t num_students , max_students ; int professor_cwid , class_num ; Student * students ; public : Course (); Course ( size_t max ); ~ Course (); Student get_student ( size_t index ) const ; void enroll_student ( const Student & student ); // Mutators void set_class_number ( int num ); void set_professor_cwid ( int id ); // Accessors int get_class_number () const ; size_t get_max_students () const ; size_t get_num_students () const ; int get_professor_cwid () const ; }; #endif include/student.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #ifndef STUDENT_H #define STUDENT_H #include \"string\" using namespace std ; class Student { private : int cwid ; string student_fname , student_lname ; public : // Contructors Student (); Student ( string fname , string lname , int id ); // Mutators void set_cwid ( int id ); void set_fname ( string fname ); void set_lname ( string lname ); // Accessors int get_cwid () const ; string get_fname () const ; string get_lname () const ; friend bool operator == ( const Student & lhs , const Student & rhs ); }; #endif src/course.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 #include \"course.h\" #include \"student.h\" #include <stdexcept> using namespace std ; Course :: Course () { // Initialize member variables. // By default, course will hold a max of 25 students. // ========= ONLY MODIFY BETWEEN THE LINES =========== // ==================================================== } Course :: Course ( size_t max ) { // Very similar to default constructor, but parameter specifies max // number of students. // ========= ONLY MODIFY BETWEEN THE LINES =========== // ==================================================== } Course ::~ Course () { // Utilized to free allocated memory. // ========= ONLY MODIFY BETWEEN THE LINES =========== // ==================================================== } Student Course :: get_student ( size_t index ) const { // Fetch student at specified index. // Utilize stdexcept to handle edge cases. // ========= ONLY MODIFY BETWEEN THE LINES =========== return Student (); // ==================================================== } void Course :: enroll_student ( const Student & student ) { // Insert a new student // Utilize stdexcept to handle endge cases. // ========= ONLY MODIFY BETWEEN THE LINES =========== // ==================================================== } void Course :: set_class_number ( int num ) { class_num = num ; } void Course :: set_professor_cwid ( int id ) { professor_cwid = id ; } int Course :: get_class_number () const { return class_num ; } size_t Course :: get_max_students () const { return max_students ; } size_t Course :: get_num_students () const { return num_students ; } int Course :: get_professor_cwid () const { return professor_cwid ; } src/student.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #include \"student.h\" Student :: Student () : cwid ( - 1 ) {} Student :: Student ( string fname , string lname , int id ) : cwid ( id ), student_fname ( fname ), student_lname ( lname ) {} void Student :: set_cwid ( int id ) { cwid = id ; } void Student :: set_fname ( string fname ) { student_fname = fname ; } void Student :: set_lname ( string lname ) { student_lname = lname ; } int Student :: get_cwid () const { return cwid ; } string Student :: get_fname () const { return student_fname ; } string Student :: get_lname () const { return student_lname ; } bool operator == ( const Student & lhs , const Student & rhs ) { return ( lhs . cwid == rhs . cwid && lhs . student_fname == rhs . student_fname && lhs . student_lname == rhs . student_lname ); }","title":"The Code"},{"location":"essentials/coding-exercise/#testing","text":"After you have modified your code, test it! You can test it by running 1 python3 run.py --test 1-dynamic-memory At the root of your repository. If you've successfully implemented all of the functions, your output should look like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u276f python3 run.py --test 1-dynamic-memory a - gtest-all.o a - gtest-all.o a - gtest_main.o unit_test_1 Running main() from /Users/oscar/Documents/projects/si-spring-2019/googletest/src/gtest_main.cc [==========] Running 3 tests from 1 test case. [----------] Global test environment set-up. [----------] 3 tests from Dynamic_Memory [ RUN ] Dynamic_Memory.Constructor [ OK ] Dynamic_Memory.Constructor (0 ms) [ RUN ] Dynamic_Memory.Enroll_Student [ OK ] Dynamic_Memory.Enroll_Student (0 ms) [ RUN ] Dynamic_Memory.Get_Student [ OK ] Dynamic_Memory.Get_Student (0 ms) [----------] 3 tests from Dynamic_Memory (0 ms total) [----------] Global test environment tear-down [==========] 3 tests from 1 test case ran. (0 ms total) [ PASSED ] 3 tests.","title":"Testing"},{"location":"essentials/problems/","text":"C++ Types \u00b6 What is a C++ type? List as many C++ types as you can. Are pointers and references a C++ type? Pointers \u00b6 What does a pointer hold? Write a line of code that declares a pointer to a double. References \u00b6 What is a reference? Write a line of code that initializes a reference to a float variable named x . Referencing and dereferencing \u00b6 What does the reference operator do? What does the dereference operator do? Write a line of code that initializes a pointer to the address of an integer variable named y The following program performs pointer arithmetic. In general terms, what should the following program output? 1 2 3 4 5 6 7 8 9 10 11 12 13 #include <iostream> using namespace std ; int main () { int var = 5 ; int * ptr = & var ; cout << var << endl ; cout << & var << endl ; cout << ptr << endl ; cout << * ptr << endl ; cout << & ptr << endl ; } The following program performs reference arithmetic. In general terms, what should the following program output? 1 2 3 4 5 6 7 8 9 10 11 12 #include <iostream> using namespace std ; int main () { int var = 5 ; int & ref = var ; cout << var << endl ; cout << & var << endl ; cout << ref << endl ; cout << & ref << endl ; } Stack \u00b6 What is the stack used for? What are the limitations of the stack? Fill out the following table with respect to the program from question 4 in Referencing and Dereferencing and question 5 in Referencinng and Dereferencing Question 4 Variable name(s) Value Address Question 5 Variable name(s) Value Address Heap \u00b6 What is heap used for? What benefits does the heap have? What are the downsides to using the heap? What does it mean to dynamically allocate? What data type does the new keyword return? Why do pointers need to be used with dynamic memory? Write a line of code to deallocate the memory referenced by the pointer ptr . Fill out the stack and heap tables below with respect to following program. 1 2 3 4 5 6 7 8 9 10 11 #include <iostream> using namespace std ; int main () { int * iptr = nullptr ; iptr = new int ( 5 ); double * dptr ; double dvar = 5.8 ; dptr = & dvar ; } Stack Variable name(s) Value Address Heap Value Address Passing by Value vs Passing by Reference \u00b6 What does it mean to pass by reference? What does it mean to pass by value? What are the advantages of passing by reference? What are the advantages of passing by value? Consider the following functions: 1 2 3 4 5 6 7 8 9 10 11 void swap_a ( int a , int b ) { int temp = a ; a = b ; b = temp ; } void swap_b ( int & a , int & b ) { int temp = a ; a = b ; b = temp ; } What does the following program output? Does it pass by value or by reference? 1 2 3 4 5 6 7 8 9 #include <iostream> using namespace std ; int main () { int x ( 2 ), y ( 3 ); cout << x << \" \" << y << endl ; swap_a ( x , y ); cout << x << \" \" << y << endl ; } What does the following program output? Does it pass by value or by reference? 1 2 3 4 5 6 7 8 9 #include <iostream> using namespace std ; int main () { int x ( 2 ), y ( 3 ); cout << x << \" \" << y << endl ; swap_b ( x , y ); cout << x << \" \" << y << endl ; }","title":"Problems"},{"location":"essentials/problems/#c-types","text":"What is a C++ type? List as many C++ types as you can. Are pointers and references a C++ type?","title":"C++ Types"},{"location":"essentials/problems/#pointers","text":"What does a pointer hold? Write a line of code that declares a pointer to a double.","title":"Pointers"},{"location":"essentials/problems/#references","text":"What is a reference? Write a line of code that initializes a reference to a float variable named x .","title":"References"},{"location":"essentials/problems/#referencing-and-dereferencing","text":"What does the reference operator do? What does the dereference operator do? Write a line of code that initializes a pointer to the address of an integer variable named y The following program performs pointer arithmetic. In general terms, what should the following program output? 1 2 3 4 5 6 7 8 9 10 11 12 13 #include <iostream> using namespace std ; int main () { int var = 5 ; int * ptr = & var ; cout << var << endl ; cout << & var << endl ; cout << ptr << endl ; cout << * ptr << endl ; cout << & ptr << endl ; } The following program performs reference arithmetic. In general terms, what should the following program output? 1 2 3 4 5 6 7 8 9 10 11 12 #include <iostream> using namespace std ; int main () { int var = 5 ; int & ref = var ; cout << var << endl ; cout << & var << endl ; cout << ref << endl ; cout << & ref << endl ; }","title":"Referencing and dereferencing"},{"location":"essentials/problems/#stack","text":"What is the stack used for? What are the limitations of the stack? Fill out the following table with respect to the program from question 4 in Referencing and Dereferencing and question 5 in Referencinng and Dereferencing Question 4 Variable name(s) Value Address Question 5 Variable name(s) Value Address","title":"Stack"},{"location":"essentials/problems/#heap","text":"What is heap used for? What benefits does the heap have? What are the downsides to using the heap? What does it mean to dynamically allocate? What data type does the new keyword return? Why do pointers need to be used with dynamic memory? Write a line of code to deallocate the memory referenced by the pointer ptr . Fill out the stack and heap tables below with respect to following program. 1 2 3 4 5 6 7 8 9 10 11 #include <iostream> using namespace std ; int main () { int * iptr = nullptr ; iptr = new int ( 5 ); double * dptr ; double dvar = 5.8 ; dptr = & dvar ; } Stack Variable name(s) Value Address Heap Value Address","title":"Heap"},{"location":"essentials/problems/#passing-by-value-vs-passing-by-reference","text":"What does it mean to pass by reference? What does it mean to pass by value? What are the advantages of passing by reference? What are the advantages of passing by value? Consider the following functions: 1 2 3 4 5 6 7 8 9 10 11 void swap_a ( int a , int b ) { int temp = a ; a = b ; b = temp ; } void swap_b ( int & a , int & b ) { int temp = a ; a = b ; b = temp ; } What does the following program output? Does it pass by value or by reference? 1 2 3 4 5 6 7 8 9 #include <iostream> using namespace std ; int main () { int x ( 2 ), y ( 3 ); cout << x << \" \" << y << endl ; swap_a ( x , y ); cout << x << \" \" << y << endl ; } What does the following program output? Does it pass by value or by reference? 1 2 3 4 5 6 7 8 9 #include <iostream> using namespace std ; int main () { int x ( 2 ), y ( 3 ); cout << x << \" \" << y << endl ; swap_b ( x , y ); cout << x << \" \" << y << endl ; }","title":"Passing by Value vs Passing by Reference"},{"location":"essentials/resources/","text":"","title":"Resources"},{"location":"graphs/coding-exercise/","text":"","title":"Coding exercise"},{"location":"graphs/problems/","text":"","title":"Problems"},{"location":"graphs/resources/","text":"","title":"Resources"},{"location":"hash-tables/coding-exercise/","text":"","title":"Coding exercise"},{"location":"hash-tables/problems/","text":"","title":"Problems"},{"location":"hash-tables/resources/","text":"","title":"Resources"},{"location":"linked-list/coding-exercise/","text":"","title":"Coding exercise"},{"location":"linked-list/problems/","text":"","title":"Problems"},{"location":"linked-list/resources/","text":"","title":"Resources"},{"location":"stacks-queues/coding-exercise/","text":"","title":"Coding exercise"},{"location":"stacks-queues/problems/","text":"","title":"Problems"},{"location":"stacks-queues/resources/","text":"","title":"Resources"},{"location":"trees/coding-exercise/","text":"","title":"Coding exercise"},{"location":"trees/problems/","text":"","title":"Problems"},{"location":"trees/resources/","text":"","title":"Resources"},{"location":"vectors/coding-exercise/","text":"","title":"Coding exercise"},{"location":"vectors/problems/","text":"","title":"Problems"},{"location":"vectors/resources/","text":"","title":"Resources"}]}